import {useState, useRef, useMemo, useEffect} from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.scss'
import {classes, parseCsvFile} from '@/utils/utils'
import localFont from 'next/font/local'
const font = localFont({ src: '../../public/fonts/lato-regular-webfont.woff2',
                        variable: '--lato-regular'})

const IMGS_FOLDER = "images/teeth1/"
const IMG_FIRST_IDX = 3
const IMG_LAST_IDX = 45
const IMGS_TOTAL = IMG_LAST_IDX - IMG_FIRST_IDX
const TEETH_AMOUNT = 16
const WIDTH = 1000;
const HEIGHT = 1000;

const IMGS_PATHS = range(IMGS_TOTAL+1, IMG_FIRST_IDX).map((v) => {
  return IMGS_FOLDER + v.toString().padStart(3, '0') + ".png"
})

function range(size, startAt = 0) {
    return [...Array(size).keys()].map(i => i + startAt);
}

export default function Home() {
  const [currentStep, setCurrentStep] = useState(0)
  const [data, setData] = useState(new Array(TEETH_AMOUNT).fill([]))
  const [currentToothIndex, setCurrentToothIndex] = useState(0)
  const imgRef = useRef(null)
  const canvasRef = useRef(null)
  const [canvasCtx, setCanvasCtx] = useState(null)

  function handleCanvasClick(event) {
        var x = event.clientX - canvasRef.current.offsetLeft;
        var y = event.clientY - canvasRef.current.offsetTop;

        setData(prevState => {
          let newState = [...prevState];
          newState[currentToothIndex] = [...newState[currentToothIndex], [x,y]];
          return newState;
        })

        setCurrentStep(prevState => {
          if(prevState === IMGS_TOTAL-1) {
            return prevState
          } else  {
            return prevState + 1
          }
        })
    }


  useEffect(() => {
    const handleKeyPress = (event) => {
      // right key, next imageeeee
      if (event.keyCode === 39) {
        setCurrentStep(prevState => {
          if(prevState === IMGS_TOTAL-1) {
            return 0
          } else  {
            return prevState + 1
          }
        })
      }

      // left key, prev image
      if (event.keyCode === 37) {
        setCurrentStep(prevState => {
          if(prevState === 0) {
            return IMGS_TOTAL-1
          } else  {
            return prevState - 1
          }
        })
      }      
    };
    window.addEventListener("keydown", handleKeyPress);
    return () => {
      window.removeEventListener("keydown", handleKeyPress);
    };
  }, []);

  useEffect(()=> {
    if(canvasRef.current) {
      setCanvasCtx(canvasRef.current.getContext("2d"))
    }
  }, [])

  useEffect(()=> {
    if(canvasCtx) {
      canvasCtx.strokeStyle = "#000000";
      canvasCtx.lineWidth = 2;
    }
  }, [canvasCtx])  

  useEffect(()=> {
    if(canvasRef.current && data[currentToothIndex].length > 1) {
      // Draw the line on the canvas
      canvasCtx.beginPath();
      let d = data[currentToothIndex];
      for(let i = 0; i < d.length - 1; i++) {
        const [startX, startY] = d[i];
        const [endX, endY] = d[i+1];
        canvasCtx.moveTo(startX, startY);
        canvasCtx.lineTo(endX, endY);        

      }
      canvasCtx.stroke();
    }
  }, [data])

  return (
    <>
      <Head>
        <title>teeth tracker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={classes([styles.main, font.variable])}>
        <canvas onMouseDown={(e) => handleCanvasClick(e)}
                ref={canvasRef}
                width={WIDTH}
                height={HEIGHT}
                className={styles.canvas}/>
        <div className={styles.imgContainer}>
          <img src={IMGS_PATHS[currentStep]}
               style={{width: WIDTH + "px", height: HEIGHT + "px"}}/>
        </div>
        <span>{currentStep+1}/{IMGS_TOTAL}</span>

      </main>
    </>
  )
}
